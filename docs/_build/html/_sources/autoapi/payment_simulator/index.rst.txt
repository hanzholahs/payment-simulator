payment_simulator
=================

.. py:module:: payment_simulator


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/payment_simulator/anomaly/index
   /autoapi/payment_simulator/networks/index
   /autoapi/payment_simulator/simulator/index
   /autoapi/payment_simulator/utils/index


Classes
-------

.. autoapisummary::

   payment_simulator.AbstractAnomalyGenerator
   payment_simulator.AnomalyGenerator
   payment_simulator.AbstractPaymentNetwork
   payment_simulator.SimplePaymentNetwork
   payment_simulator.AbstractPaymentNetwork
   payment_simulator.AbstractTransactionSim
   payment_simulator.TransactionSim


Functions
---------

.. autoapisummary::

   payment_simulator.anomaly_parameter
   payment_simulator.zero_anomaly_gen
   payment_simulator.anomaly_parameter
   payment_simulator.random_payment_value
   payment_simulator.random_payment_timing
   payment_simulator.calc_num_payments
   payment_simulator.calculate_network_params
   payment_simulator.zero_anomaly_gen


Package Contents
----------------

.. py:function:: anomaly_parameter(x_start: float, x_end: float, rate: float, current: int, anomaly_start: int, anomaly_end: int) -> float

.. py:class:: AbstractAnomalyGenerator

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: __call__(current_period: int) -> float
      :abstractmethod:



.. py:class:: AnomalyGenerator(anomaly_start: int, anomaly_end: int, prob_start: float, prob_end: float, lambda_start: float, lambda_end: float, rate: float)

   Bases: :py:obj:`AbstractAnomalyGenerator`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: __call__(current_period: int) -> float


.. py:class:: AbstractPaymentNetwork(total_banks: int)

   Bases: :py:obj:`abc.ABC`


   An abstract base class for creating payment networks that simulate transactions
   between banks within a financial system.

   .. attribute:: total_banks

      The total number of banks included in the network simulation.

      :type: int

   .. attribute:: G

      The graph representing the payment network, where nodes represent banks
      and edges represent transactions between them.

      :type: networkx.Graph

   .. method:: simulate_payments(init_banks: int | None)

      Simulates transactions across the network. This method must be implemented by subclasses.

   .. method:: extract_link_matrix(prop: bool = True) -> np.ndarray

      Returns the adjacency matrix of the network, either as raw counts or as proportions.

   .. method:: _create_transaction()

      Internal method to create a random transaction between banks based on predefined probabilities.

   .. method:: _random_bank(prob: np.ndarray) -> int

      Selects a bank for initiating a transaction based on a weighted probability distribution.

   .. method:: _payment_link(sender: int, receiver: int)

      Establishes or updates a transaction link between two banks.



   .. py:method:: simulate_payments(init_banks: int | None)
      :abstractmethod:


      Abstract method to simulate payments between banks in the network.
      Must be implemented by all subclasses to define specific simulation strategies.

      :param init_banks: The number of banks that start transacting at the initiation of the simulation.
      :type init_banks: int, optional



   .. py:method:: extract_link_matrix(prop: bool = True) -> numpy.ndarray

      Retrieves the adjacency matrix of the network, showing transaction links between banks.

      :param prop: Determines whether the matrix should show proportions of total transactions (True)
                   or raw transaction counts (False). Defaults to True.
      :type prop: bool, optional

      :returns: The adjacency matrix of the network.
      :rtype: np.ndarray



   .. py:method:: _create_transaction()

      Internally generates a random transaction by selecting a sender and receiver from the network.
      The selection is influenced by the preferential attachment vector 'h'.



   .. py:method:: _random_bank(prob) -> int

      Randomly selects a bank to initiate a transaction, using a weighted probability distribution.

      :param prob: An array of probabilities for each bank, indicating the likelihood of each bank initiating a transaction.
      :type prob: np.ndarray

      :returns: The identifier of the bank selected to initiate the transaction.
      :rtype: int



   .. py:method:: _payment_link(sender: int, receiver: int) -> None

      Creates or updates a payment link between two banks.

      :param sender: The identifier of the bank initiating the payment.
      :type sender: int
      :param receiver: The identifier of the bank receiving the payment.
      :type receiver: int

      .. rubric:: Notes

      This method increments the weight of the edge between the sender and receiver to reflect
      the occurrence of a transaction.



.. py:class:: SimplePaymentNetwork(total_banks: int, avg_payments: int, alpha: float = 0, allow_self_loop: bool = False)

   Bases: :py:obj:`AbstractPaymentNetwork`


   An abstract base class for creating payment networks that simulate transactions
   between banks within a financial system.

   .. attribute:: total_banks

      The total number of banks included in the network simulation.

      :type: int

   .. attribute:: G

      The graph representing the payment network, where nodes represent banks
      and edges represent transactions between them.

      :type: networkx.Graph

   .. method:: simulate_payments(init_banks: int | None)

      Simulates transactions across the network. This method must be implemented by subclasses.

   .. method:: extract_link_matrix(prop: bool = True) -> np.ndarray

      Returns the adjacency matrix of the network, either as raw counts or as proportions.

   .. method:: _create_transaction()

      Internal method to create a random transaction between banks based on predefined probabilities.

   .. method:: _random_bank(prob: np.ndarray) -> int

      Selects a bank for initiating a transaction based on a weighted probability distribution.

   .. method:: _payment_link(sender: int, receiver: int)

      Establishes or updates a transaction link between two banks.



   .. py:method:: simulate_payments(init_banks: int | None = None, increment: int = 2) -> None

      Simulates the payment processing between banks, gradually increasing the number of participating banks
      according to specified parameters. The simulation starts with an initial set of banks and incrementally adds
      more until all banks are active.

      :param init_banks: The initial number of banks to include in the simulation. If not specified, it defaults to half of the total banks, rounded up.
      :type init_banks: int, optional
      :param increment: The number of additional banks added in each step of the simulation. Must be a positive integer.
      :type increment: int, optional

      :raises AssertionError: If `increment` is not a positive integer.

      .. rubric:: Notes

      The simulation dynamically adjusts the number of transactions based on the changing number of banks,
      maintaining the average payments per bank. This process continues until all specified banks are included
      in the network or the addition results in no new banks due to constraints.



.. py:class:: AbstractPaymentNetwork(total_banks: int)

   Bases: :py:obj:`abc.ABC`


   An abstract base class for creating payment networks that simulate transactions
   between banks within a financial system.

   .. attribute:: total_banks

      The total number of banks included in the network simulation.

      :type: int

   .. attribute:: G

      The graph representing the payment network, where nodes represent banks
      and edges represent transactions between them.

      :type: networkx.Graph

   .. method:: simulate_payments(init_banks: int | None)

      Simulates transactions across the network. This method must be implemented by subclasses.

   .. method:: extract_link_matrix(prop: bool = True) -> np.ndarray

      Returns the adjacency matrix of the network, either as raw counts or as proportions.

   .. method:: _create_transaction()

      Internal method to create a random transaction between banks based on predefined probabilities.

   .. method:: _random_bank(prob: np.ndarray) -> int

      Selects a bank for initiating a transaction based on a weighted probability distribution.

   .. method:: _payment_link(sender: int, receiver: int)

      Establishes or updates a transaction link between two banks.



   .. py:method:: simulate_payments(init_banks: int | None)
      :abstractmethod:


      Abstract method to simulate payments between banks in the network.
      Must be implemented by all subclasses to define specific simulation strategies.

      :param init_banks: The number of banks that start transacting at the initiation of the simulation.
      :type init_banks: int, optional



   .. py:method:: extract_link_matrix(prop: bool = True) -> numpy.ndarray

      Retrieves the adjacency matrix of the network, showing transaction links between banks.

      :param prop: Determines whether the matrix should show proportions of total transactions (True)
                   or raw transaction counts (False). Defaults to True.
      :type prop: bool, optional

      :returns: The adjacency matrix of the network.
      :rtype: np.ndarray



   .. py:method:: _create_transaction()

      Internally generates a random transaction by selecting a sender and receiver from the network.
      The selection is influenced by the preferential attachment vector 'h'.



   .. py:method:: _random_bank(prob) -> int

      Randomly selects a bank to initiate a transaction, using a weighted probability distribution.

      :param prob: An array of probabilities for each bank, indicating the likelihood of each bank initiating a transaction.
      :type prob: np.ndarray

      :returns: The identifier of the bank selected to initiate the transaction.
      :rtype: int



   .. py:method:: _payment_link(sender: int, receiver: int) -> None

      Creates or updates a payment link between two banks.

      :param sender: The identifier of the bank initiating the payment.
      :type sender: int
      :param receiver: The identifier of the bank receiving the payment.
      :type receiver: int

      .. rubric:: Notes

      This method increments the weight of the edge between the sender and receiver to reflect
      the occurrence of a transaction.



.. py:function:: zero_anomaly_gen(period) -> int

.. py:class:: AbstractTransactionSim(network: payment_simulator.networks.AbstractPaymentNetwork, value_fn: Callable, timing_fn: Callable, open_time: str = '08:00:00', close_time: str = '17:00:00')

   Bases: :py:obj:`abc.ABC`


   An abstract base class designed for simulating transaction scenarios within a financial network.
   This class is intended to be subclassed to provide specific implementations for simulating
   transaction values and timings within operational hours.

   :param network: An instance of a payment network which handles the simulation of payments.
   :type network: AbstractPaymentNetwork
   :param value_fn: Function to calculate the value of each transaction.
   :type value_fn: Callable
   :param timing_fn: Function to determine the timing of each transaction within the specified operational hours.
   :type timing_fn: Callable
   :param open_time: The opening time of the transaction window each day, formatted as "HH:MM:SS", default is "08:00:00".
   :type open_time: str, optional
   :param close_time: The closing time of the transaction window each day, formatted as "HH:MM:SS", default is "17:00:00".
   :type close_time: str, optional

   .. attribute:: payments

      A list to store all payment transactions. Each transaction is stored as a tuple containing
      period, timing, sender, receiver, count, and value.

      :type: list[tuple]

   .. attribute:: network

      The payment network instance used for simulating transactions.

      :type: AbstractPaymentNetwork

   .. attribute:: value_fn

      Function used to calculate the transaction value.

      :type: Callable

   .. attribute:: timing_fn

      Function used to determine the transaction timing.

      :type: Callable

   .. attribute:: open_time

      Parsed opening time for transactions.

      :type: datetime.time

   .. attribute:: close_time

      Parsed closing time for transactions.

      :type: datetime.time

   .. method:: get_payments_df() -> pd.DataFrame

      Returns a DataFrame containing all simulated transactions with details.

   .. method:: get_balances_df() -> pd.DataFrame

      Returns a DataFrame containing the balances of all participants after simulation.

   .. method:: simulate_day(init_banks: int | None = None)

      Simulates a day's transactions using the network's payment simulation functionality.



   .. py:method:: get_payments_df() -> pandas.DataFrame

      Compiles and returns a DataFrame from the accumulated payment transactions.

      :returns: A DataFrame detailing all transactions, with columns for the period, time of transaction,
                sender bank, receiver bank, count of transactions, and the value of each transaction.
      :rtype: pd.DataFrame

      :raises AssertionError: If no transactions have been simulated yet, prompting a reminder to run simulations.



   .. py:method:: get_balances_df() -> pandas.DataFrame

      Constructs and returns a DataFrame containing the balances of all participants after simulation.

      :returns: A DataFrame detailing the balances of each participant, with columns for the participant identifier
                and their respective balance.
      :rtype: pd.DataFrame

      :raises AssertionError: If no simulation has been run yet, indicating that there are no balances to report. This assertion ensures
          that balance information is only attempted to be retrieved after at least one simulation cycle.



   .. py:method:: simulate_day(init_banks: int | None = None)

      Simulates transaction activities for a single day, optionally initializing a specific number of banks
      at the start of the simulation. This method utilizes the network's simulate_payments method to process transactions.

      :param init_banks: The number of banks to include at the beginning of the day's simulation. If not specified, the simulation
                         will proceed with the default setup as defined by the network's initial configuration.
      :type init_banks: int, optional

      .. rubric:: Notes

      This method is designed to be run multiple times if simulating transactions over multiple days. Each call
      represents a single day of transaction activity, with the state of the network carrying over to the next call.



.. py:class:: TransactionSim(sim_id: Any = 0, anomaly_gen: Callable = zero_anomaly_gen, *args, **kwargs)

   Bases: :py:obj:`AbstractTransactionSim`


   A simulation class designed for generating and analyzing anomalous transaction patterns within a financial network.
   This class extends `AbstractTransactionSim` by integrating an anomaly generator to simulate transaction anomalies.

   :param sim_id: A unique identifier for the simulation, which can be of any data type (int, string, etc.).
   :type sim_id: Any
   :param anomaly_gen: An instance of an anomaly generator that applies modifications to transaction values, simulating anomalies.
   :type anomaly_gen: Callable
   :param \*\*kwargs: Additional keyword arguments that are passed to the superclass `AbstractTransactionSim`, including network, value_fn, timing_fn, open_time, and close_time.
   :type \*\*kwargs: dict

   .. attribute:: sim_id

      Stores the identifier for this particular simulation instance.

      :type: Any

   .. attribute:: anomaly_gen

      Holds the anomaly generator which is used to introduce anomalies into the transactions during the simulation.

      :type: Callable

   .. attribute:: payments

      Accumulates all transaction data generated during the simulation, capturing details such as period, timing, sender, receiver, count, and anomalous values.

      :type: list[tuple]

   .. method:: run(sim_periods: Iterable[int]) -> None

      Executes the simulation over specified time periods, generating payments by integrating anomalies at defined intervals.



   .. py:method:: run(sim_periods: Iterable[int], anomalous_bank: Iterable[int] = []) -> None

      Executes the simulation over a series of defined time periods, generating transactions
      and optionally incorporating anomalies for specified banks.

      :param sim_periods: A list of time periods over which the simulation is run, typically representing each day.
      :type sim_periods: Iterable[int]
      :param anomalous_bank: A list of bank indices that should have anomalies applied to their transactions.
                             If empty, no anomalies are applied. Defaults to an empty list.
      :type anomalous_bank: Iterable[int], optional
      :param Process:
      :param -------:
      :param 1. For each period in `sim_periods`:
      :param simulate the day's network dynamics.:
      :param 2. Iterate over each link (bank pair) in the payment network:
                                                                           a. For each link, simulate the specified number of transactions (based on link weight).
                                                                           b. Calculate the timing for each transaction within operational hours.
                                                                           c. Calculate the transaction value, and apply an anomaly if the sender is listed in `anomalous_bank`.
                                                                           d. Store each transaction in `all_payments` with its period, timing, sender, receiver, type, and value.
                                                                           e. Update the sender's and receiver's balance accordingly and track the minimum balance for each bank.

      .. rubric:: Notes

      - This method updates the `payments` attribute with all transactions from the simulation,
        where each transaction includes details such as period, timing, sender, receiver, and value.
      - It also updates the `balances` attribute to reflect the minimum balance each bank reaches during the simulation.



.. py:function:: anomaly_parameter(x_start: float, x_end: float, rate: float, current: int, anomaly_start: int, anomaly_end: int) -> float

.. py:function:: random_payment_value() -> float

   Computes a random value based on a log-normal distribution.

   :param args: Parameters for the lognormal distribution, typically mean and standard deviation.
   :return: A random value sampled from a log-normal distribution.


.. py:function:: random_payment_timing(open_time: datetime.time, close_time: datetime.time) -> datetime.time

   Generates a random datetime within the operation period defined by the open and close times.

   :param open_time: Opening time of the operation period.
   :param close_time: Closing time of the operation, must be after the open time.
   :param args: Additional arguments to be passed to the uniform distribution, typically the bounds for the random period.
   :return: A random datetime within the specified operation period.


.. py:function:: calc_num_payments(G: networkx.DiGraph) -> int

.. py:function:: calculate_network_params(G: networkx.DiGraph) -> dict

   Calculates and returns various parameters of the simulation such as connectivity, reciprocity, and degrees.

   :return: Dictionary containing calculated simulation parameters.


.. py:function:: zero_anomaly_gen(period) -> int

