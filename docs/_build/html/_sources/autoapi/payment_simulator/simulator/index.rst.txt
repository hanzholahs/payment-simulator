payment_simulator.simulator
===========================

.. py:module:: payment_simulator.simulator


Classes
-------

.. autoapisummary::

   payment_simulator.simulator.AbstractTransactionSim
   payment_simulator.simulator.TransactionSim


Module Contents
---------------

.. py:class:: AbstractTransactionSim(network: payment_simulator.networks.AbstractPaymentNetwork, value_fn: Callable, timing_fn: Callable, open_time: str = '08:00:00', close_time: str = '17:00:00')

   Bases: :py:obj:`abc.ABC`


   An abstract base class designed for simulating transaction scenarios within a financial network.
   This class is intended to be subclassed to provide specific implementations for simulating
   transaction values and timings within operational hours.

   :param network: An instance of a payment network which handles the simulation of payments.
   :type network: AbstractPaymentNetwork
   :param value_fn: Function to calculate the value of each transaction.
   :type value_fn: Callable
   :param timing_fn: Function to determine the timing of each transaction within the specified operational hours.
   :type timing_fn: Callable
   :param open_time: The opening time of the transaction window each day, formatted as "HH:MM:SS", default is "08:00:00".
   :type open_time: str, optional
   :param close_time: The closing time of the transaction window each day, formatted as "HH:MM:SS", default is "17:00:00".
   :type close_time: str, optional

   .. attribute:: payments

      A list to store all payment transactions. Each transaction is stored as a tuple containing
      period, timing, sender, receiver, count, and value.

      :type: list[tuple]

   .. attribute:: network

      The payment network instance used for simulating transactions.

      :type: AbstractPaymentNetwork

   .. attribute:: value_fn

      Function used to calculate the transaction value.

      :type: Callable

   .. attribute:: timing_fn

      Function used to determine the transaction timing.

      :type: Callable

   .. attribute:: open_time

      Parsed opening time for transactions.

      :type: datetime.time

   .. attribute:: close_time

      Parsed closing time for transactions.

      :type: datetime.time

   .. method:: get_payments_df() -> pd.DataFrame

      Returns a DataFrame containing all simulated transactions with details.

   .. method:: get_balances_df() -> pd.DataFrame

      Returns a DataFrame containing the balances of all participants after simulation.

   .. method:: simulate_day(init_banks: int | None = None)

      Simulates a day's transactions using the network's payment simulation functionality.



   .. py:method:: get_payments_df() -> pandas.DataFrame

      Compiles and returns a DataFrame from the accumulated payment transactions.

      :returns: A DataFrame detailing all transactions, with columns for the period, time of transaction,
                sender bank, receiver bank, count of transactions, and the value of each transaction.
      :rtype: pd.DataFrame

      :raises AssertionError: If no transactions have been simulated yet, prompting a reminder to run simulations.



   .. py:method:: get_balances_df() -> pandas.DataFrame

      Constructs and returns a DataFrame containing the balances of all participants after simulation.

      :returns: A DataFrame detailing the balances of each participant, with columns for the participant identifier
                and their respective balance.
      :rtype: pd.DataFrame

      :raises AssertionError: If no simulation has been run yet, indicating that there are no balances to report. This assertion ensures
          that balance information is only attempted to be retrieved after at least one simulation cycle.



   .. py:method:: simulate_day(init_banks: int | None = None)

      Simulates transaction activities for a single day, optionally initializing a specific number of banks
      at the start of the simulation. This method utilizes the network's simulate_payments method to process transactions.

      :param init_banks: The number of banks to include at the beginning of the day's simulation. If not specified, the simulation
                         will proceed with the default setup as defined by the network's initial configuration.
      :type init_banks: int, optional

      .. rubric:: Notes

      This method is designed to be run multiple times if simulating transactions over multiple days. Each call
      represents a single day of transaction activity, with the state of the network carrying over to the next call.



.. py:class:: TransactionSim(sim_id: Any = 0, anomaly_gen: Callable = zero_anomaly_gen, *args, **kwargs)

   Bases: :py:obj:`AbstractTransactionSim`


   A simulation class designed for generating and analyzing anomalous transaction patterns within a financial network.
   This class extends `AbstractTransactionSim` by integrating an anomaly generator to simulate transaction anomalies.

   :param sim_id: A unique identifier for the simulation, which can be of any data type (int, string, etc.).
   :type sim_id: Any
   :param anomaly_gen: An instance of an anomaly generator that applies modifications to transaction values, simulating anomalies.
   :type anomaly_gen: Callable
   :param \*\*kwargs: Additional keyword arguments that are passed to the superclass `AbstractTransactionSim`, including network, value_fn, timing_fn, open_time, and close_time.
   :type \*\*kwargs: dict

   .. attribute:: sim_id

      Stores the identifier for this particular simulation instance.

      :type: Any

   .. attribute:: anomaly_gen

      Holds the anomaly generator which is used to introduce anomalies into the transactions during the simulation.

      :type: Callable

   .. attribute:: payments

      Accumulates all transaction data generated during the simulation, capturing details such as period, timing, sender, receiver, count, and anomalous values.

      :type: list[tuple]

   .. method:: run(sim_periods: Iterable[int]) -> None

      Executes the simulation over specified time periods, generating payments by integrating anomalies at defined intervals.



   .. py:method:: run(sim_periods: Iterable[int], anomalous_bank: Iterable[int] = []) -> None

      Executes the simulation over a series of defined time periods, generating transactions
      and optionally incorporating anomalies for specified banks.

      :param sim_periods: A list of time periods over which the simulation is run, typically representing each day.
      :type sim_periods: Iterable[int]
      :param anomalous_bank: A list of bank indices that should have anomalies applied to their transactions.
                             If empty, no anomalies are applied. Defaults to an empty list.
      :type anomalous_bank: Iterable[int], optional
      :param Process:
      :param -------:
      :param 1. For each period in `sim_periods`:
      :param simulate the day's network dynamics.:
      :param 2. Iterate over each link (bank pair) in the payment network:
                                                                           a. For each link, simulate the specified number of transactions (based on link weight).
                                                                           b. Calculate the timing for each transaction within operational hours.
                                                                           c. Calculate the transaction value, and apply an anomaly if the sender is listed in `anomalous_bank`.
                                                                           d. Store each transaction in `all_payments` with its period, timing, sender, receiver, type, and value.
                                                                           e. Update the sender's and receiver's balance accordingly and track the minimum balance for each bank.

      .. rubric:: Notes

      - This method updates the `payments` attribute with all transactions from the simulation,
        where each transaction includes details such as period, timing, sender, receiver, and value.
      - It also updates the `balances` attribute to reflect the minimum balance each bank reaches during the simulation.



