{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Payment Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `payment_simulator` package is designed to simulate payment transactions within large-value payment systems. While it is tailored for high-value transactions often seen in systems like RTGS (Real-Time Gross Settlement), it can also generate synthetic transaction data for other types of payment systems, including retail payments or blockchain-based platforms. This simulation is conducted through the creation of a payment network consisting of nodes (participants, typically banks) and edges (transactions between these participants). The network's structure is randomly determined based on specified parameters. This guide demonstrates how to utilize the `SimplePaymentNetwork` and `GroupedPaymentNetwork` classes to generate and analyze these networks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from payment_simulator import SimplePaymentNetwork\n",
    "from payment_simulator.utils import calculate_network_params\n",
    "\n",
    "np.random.seed(1234)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "TOTAL_BANKS = 10\n",
    "INITIAL_BANKS = 3\n",
    "INCREMENT_BANKS = 4\n",
    "ALPHA = 1e-5\n",
    "AVG_PAYMENTS = 100\n",
    "ALLOW_SELF_LOOP = False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simple Payment Network\n",
    "\n",
    "The `SimplePaymentNetwork` class simulates a payment network by sequentially adding banks and transactions. It selects random senders and receivers based on a preferential attachment vector, which is adjusted by a parameter alpha to increase the likelihood of previously chosen banks being selected again. This class also allows the configuration of self-transactions, where banks can send payments to themselves.\n",
    "\n",
    "### Simulating Payments\n",
    "\n",
    "The `simulate_payments` method executes the network simulation. It starts by adding a set of `initial_banks` that begin transacting amongst themselves. In each subsequent iteration, additional banks are introduced according to the `increment` parameter, increasing the complexity of the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "network = SimplePaymentNetwork(total_banks=TOTAL_BANKS,\n",
    "                               avg_payments=AVG_PAYMENTS,\n",
    "                               allow_self_loop=ALLOW_SELF_LOOP,\n",
    "                               alpha=ALPHA)\n",
    "\n",
    "network.simulate_payments(increment=INCREMENT_BANKS, init_banks=INITIAL_BANKS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking the Results \n",
    "\n",
    "After running the simulation, you can examine the final preferential attachment using the `network.h` attribute. The `extract_link_matrix` method provides a normalized view of the transaction links between participants, indicating the proportion of transactions between each pair of banks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preferential Attachment of Banks:\n",
      "[1.00425 1.00399 1.00378 1.00234 1.00204 1.00119 1.00087 1.00061 1.00051\n",
      " 1.00042]\n",
      "\n",
      "Network links:\n",
      "[[ 0 78 66 25 22 15  8  2  3  3]\n",
      " [63  0 61 20 22  8  1  3  1  2]\n",
      " [62 78  0 28 20  4  5  1  3  1]\n",
      " [28 21 16  0 28  5  5  2  2  3]\n",
      " [24 13 12 19  0  9  4  4  5  1]\n",
      " [12  9  9 12  7  0  4  0  4  2]\n",
      " [ 6 11  4 12  4 10  0  5  0  2]\n",
      " [ 2  3  4  5  5  3  4  0  7  5]\n",
      " [ 5  3  2  2  4  2  0  2  0  3]\n",
      " [ 1  2  2  1  1  4  2  4  3  0]]\n",
      "\n",
      "Network links:\n",
      "[[0.    0.078 0.066 0.025 0.022 0.015 0.008 0.002 0.003 0.003]\n",
      " [0.063 0.    0.061 0.02  0.022 0.008 0.001 0.003 0.001 0.002]\n",
      " [0.062 0.078 0.    0.028 0.02  0.004 0.005 0.001 0.003 0.001]\n",
      " [0.028 0.021 0.016 0.    0.028 0.005 0.005 0.002 0.002 0.003]\n",
      " [0.024 0.013 0.012 0.019 0.    0.009 0.004 0.004 0.005 0.001]\n",
      " [0.012 0.009 0.009 0.012 0.007 0.    0.004 0.    0.004 0.002]\n",
      " [0.006 0.011 0.004 0.012 0.004 0.01  0.    0.005 0.    0.002]\n",
      " [0.002 0.003 0.004 0.005 0.005 0.003 0.004 0.    0.007 0.005]\n",
      " [0.005 0.003 0.002 0.002 0.004 0.002 0.    0.002 0.    0.003]\n",
      " [0.001 0.002 0.002 0.001 0.001 0.004 0.002 0.004 0.003 0.   ]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Preferential Attachment of Banks:\")\n",
    "print(network.h)\n",
    "\n",
    "print(\"\\nNetwork links:\")\n",
    "print(np.round(network.extract_link_matrix(prop=False).astype(int), 4))\n",
    "\n",
    "print(\"\\nNetwork links:\")\n",
    "print(np.round(network.extract_link_matrix(), 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distribution of transactions can be visualized using a heatmap, where lighter areas represent a higher frequency of transactions between nodes. This visualization aligns with network theories suggesting that most nodes typically have fewer connections."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(network.extract_link_matrix(False), cmap='hot', interpolation='nearest')\n",
    "plt.colorbar()\n",
    "plt.title('Heatmap of transaction links')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `payment_simulator` package comes equipped with utility functions to help analyze key network metrics that can provide insights into the structure and efficiency of the network, which is `calculate_network_params`. It computes various network metrics such as the number of nodes, number of links, connectivity, reciprocity, average degree, and the maximum in and out degree values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Number of nodes       10.000000\n",
       "Number of links       87.000000\n",
       "Connectivity           0.966667\n",
       "Reciprocity            0.988506\n",
       "Average Degree (k)    17.400000\n",
       "Max (k-in)             9.000000\n",
       "Max (k-out)            9.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(calculate_network_params(network.G))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "paysim",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
